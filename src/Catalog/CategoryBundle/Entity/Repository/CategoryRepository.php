<?php

namespace Catalog\CategoryBundle\Entity\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Doctrine\ORM\Mapping\ClassMetadata;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends NestedTreeRepository
{
    private $session;

    public function __construct(EntityManager $em, ClassMetadata $class) {
        parent::__construct($em, $class);
        global $kernel;
        if($kernel instanceOf \AppCache)
            $kernel = $kernel->getKernel();
        $this->session = $kernel->getContainer()->get('session');
    }

    public function getListCategory() {
        $q = $this->_em->createQueryBuilder();
//        $catalogs = self::findCatalogsForProject($this->session->get('project_id'));
        $query = $q->select("c")
            ->from("CatalogCategoryBundle:Category", "c")
//            ->where($q->expr()->in('c.root', $catalogs))
            ->orderBy('c.root', 'ASC')
            ->addOrderBy('c.lft', 'ASC');

        return $query;
    }

    public function getTree($project_id, $alias, $deep = 0){
        $q = $this->_em->createQueryBuilder();
//        $catalogs = self::findCatalogsForProject($project_id);

        $query = $q->select("c")
            ->from("CatalogCategoryBundle:Category", "c")
//            ->leftJoin('c.content', 't')
//            ->leftJoin('t.sale', 's')
//            ->where($q->expr()->in('c.root', $catalogs))
            ->andWhere('c.is_active = true');
//                ->andWhere('t.is_active = true');
        if($alias){
            $parent = $this->findOneBy(array('alias' => $alias));
            $query = $query
                ->andWhere('c.lft BETWEEN :lft AND :rgt ')
                ->setParameter('lft', $parent->getLft())
                ->setParameter('rgt', $parent->getRgt());
            if ($deep != 0) {
                $query = $query->andWhere('c.level > :levelMin')
                    ->andWhere('c.level < :levelMax')
                    ->setParameter('levelMin', $parent->getLevel())
                    ->setParameter('levelMax', $parent->getLevel() + $deep);
            }
        }
        else {
            if ($deep != 0) {
                $query = $query->andWhere('c.level <= :deep')->setParameter('deep', $deep);
            }
        }
        $query = $query
            ->addOrderBy('c.root')
            ->addOrderBy('c.lft')
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getBreadcrumbs($projectId, $alias){
        $entity = $this->_em->createQuery(
            "SELECT parent FROM CatalogCategoryBundle:Category AS node,
                CatalogCategoryBundle:Category AS parent
                WHERE node.lft  
                BETWEEN parent.lft 
                AND parent.rgt 
                AND node.alias = :alias 
                AND node.root = parent.root 
                AND parent.level <> 0 "
        )
            ->setParameter('alias', $alias)
            ->getResult();

        return $entity;
    }

    public function getCategoriesByAlias($projectId, $alias){
        $q = $this->_em->createQueryBuilder();
//        $catalogs = self::findCatalogsForProject($project_id);

        $query = $q->select("c")
            ->from("CatalogCategoryBundle:Category", "c")
            ->leftJoin('c.parent', 'p')
            ->where('p.alias = :alias')
            ->andWhere('c.is_active = true')
            ->addOrderBy('c.root')
            ->addOrderBy('c.lft')
            ->setParameter('alias', $alias)
            ->getQuery()
            ->getResult();

        return $query;
    }

    public function getItemByAlias($project_id, $alias, $filter = null){

        $q = $this->_em->createQueryBuilder();
        $catalogs = self::findCatalogsForProject($project_id);

        $query = $q->select("c, t, ch")
            ->from("CatalogCategoryBundle:Category", "c")
            ->leftJoin('c.content', 't')
            ->leftJoin('c.children', 'ch')
//            ->where($q->expr()->in('c.root', $catalogs))
            ->andWhere('c.is_active = true')
            ->andWhere('c.alias = :alias')
//                ->andWhere('ch.is_active = true')
//                ->andWhere('t.is_active = true')
//                ->andWhere('i.is_active = true')
//                ->andWhere('img.is_active = true')
//                ->andWhere('r.is_active = true')
            ->setParameter('alias', $alias)
            ->addOrderBy('ch.lft')
            ->getQuery()
            ->getOneOrNullResult();

        return $query;
    }

    public function findCatalogsForProject($projectId) {

        $q = $this->_em->createQueryBuilder();
        $query = $q->select("c")
            ->from("CatalogCatalogBundle:CatalogProject", "c")
            ->where('c.project_id = :projectId')
            ->setParameter('projectId', $projectId)
            ->getQuery()
            ->getResult();
        $result = array();
        foreach ($query as $one) {
            $result[] = $one->getCatalogId();
        }

        return $result;
    }
}
